<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>SBS</groupId>
    <artifactId>sbs</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>SBS School</name>
    <description>School Management System</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.3.5.RELEASE</version>
        <relativePath/> <!-- lookup parent from reposijory -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
        <spring-cloud.version>Dalston.SR1</spring-cloud.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <proguard.version>6.1.0beta2</proguard.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>org.springframework.boot</groupId>-->
<!--            <artifactId>spring-boot-starter-security</artifactId>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>org.thymeleaf.extras</groupId>-->
<!--            <artifactId>thymeleaf-extras-springsecurity4</artifactId>-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!--        <dependency>
                    <groupId>org.flywaydb</groupId>
                    <artifactId>flyway-core</artifactId>
                </dependency>-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!--<dependency>-->
        <!--<groupId>com.github.noraui</groupId>-->
        <!--<artifactId>ojdbc7</artifactId>-->
        <!--<version>12.1.0.2</version>-->
        <!--</dependency>-->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>9.1-901-1.jdbc4</version>
        </dependency>
        <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>mail</artifactId>
            <version>1.4</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
            <version>1.5.1</version>
        </dependency>
        <dependency>
            <groupId>com.maxmind.geoip</groupId>
            <artifactId>geoip-api</artifactId>
            <version>1.2.14</version>
        </dependency>
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <build>
        <finalName>SBSchool</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>1.2.5.RELEASE</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <imageName>demoboot</imageName>
                    <baseImage>java:8</baseImage>
                    <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
                    <!-- copy the service's jar file from target into the root directory of the image -->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>

            <!--<plugin>-->
                <!--<groupId>com.github.wvengen</groupId>-->
                <!--<artifactId>proguard-maven-plugin</artifactId>-->
                <!--<version>2.0.14</version>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<phase>package</phase>-->
                        <!--<goals>-->
                            <!--<goal>proguard</goal>-->
                        <!--</goals>-->
                    <!--</execution>-->
                <!--</executions>-->
                <!--<configuration>-->
                    <!--<proguardVersion>${proguard.version}</proguardVersion>-->
                    <!--<injar>${project.build.finalName}.jar</injar>-->
                    <!--<outjar>${project.build.finalName}.jar</outjar>-->
                    <!--<obfuscate>true</obfuscate>-->
                    <!--<options>-->
                        <!--<option>-dontshrink</option>-->
                        <!--<option>-dontoptimize</option>-->
                        <!--&lt;!&ndash; This option will replace all strings in reflections method invocations with new class names.-->
                             <!--For example, invokes Class.forName('className')&ndash;&gt;-->
                        <!--<option>-adaptclassstrings</option>-->
                        <!--&lt;!&ndash; This option will save all original annotations and etc. Otherwise all we be removed from files.&ndash;&gt;-->
                        <!--<option>-keepattributes-->
                            <!--Exceptions,-->
                            <!--InnerClasses,-->
                            <!--Signature,-->
                            <!--Deprecated,-->
                            <!--SourceFile,-->
                            <!--LineNumberTable,-->
                            <!--*Annotation*,-->
                            <!--EnclosingMethod-->
                        <!--</option>-->
                        <!--&lt;!&ndash; This option will save all original names in interfaces (without obfuscate).&ndash;&gt;-->
                        <!--<option>-keepnames interface **</option>-->
                        <!--&lt;!&ndash; This option will save all original methods parameters in files defined in -keep sections,-->
                             <!--otherwise all parameter names will be obfuscate.&ndash;&gt;-->
                        <!--<option>-keepparameternames</option>-->
                        <!--&lt;!&ndash; This option will save all original class files (without obfuscate) but obfuscate all-->
                             <!--in domain and service packages.&ndash;&gt;-->
                        <!--<option>-keep-->
                            <!--class com.slm.proguard.example.spring.boot.Application {-->
                            <!--public static void main(java.lang.String[]);-->
                            <!--}-->
                        <!--</option>-->
                        <!--&lt;!&ndash; This option ignore warnings such as duplicate class definitions and classes in incorrectly-->
                            <!--named files&ndash;&gt;-->
                        <!--<option>-ignorewarnings</option>-->
                        <!--&lt;!&ndash; This option will save all original class files (without obfuscate) in service package&ndash;&gt;-->
                        <!--&lt;!&ndash;<option>-keep class com.slm.proguard.example.spring.boot.service { *; }</option>&ndash;&gt;-->
                        <!--&lt;!&ndash; This option will save all original interfaces files (without obfuscate) in all packages.&ndash;&gt;-->
                        <!--<option>-keep interface * extends * { *; }</option>-->
                        <!--&lt;!&ndash; This option will save all original defined annotations in all class in all packages.&ndash;&gt;-->
                        <!--<option>-keepclassmembers class * {-->
                            <!--@org.springframework.beans.factory.annotation.Autowired *;-->
                            <!--@org.springframework.beans.factory.annotation.Value *;-->
                            <!--}-->
                        <!--</option>-->
                    <!--</options>-->
                    <!--<injarNotExistsSkip>true</injarNotExistsSkip>-->
                    <!--<libs>-->
                        <!--&lt;!&ndash;Put here your libraries if required&ndash;&gt;-->
                        <!--&lt;!&ndash;<lib>${java.home}/lib/rt.jar</lib>&ndash;&gt;-->
                    <!--</libs>-->
                <!--</configuration>-->
                <!--<dependencies>-->
                    <!--<dependency>-->
                        <!--<groupId>net.sf.proguard</groupId>-->
                        <!--<artifactId>proguard-base</artifactId>-->
                        <!--<version>${proguard.version}</version>-->
                    <!--</dependency>-->
                <!--</dependencies>-->
            <!--</plugin>-->

        </plugins>
    </build>


</project>
